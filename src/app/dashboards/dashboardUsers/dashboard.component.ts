import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule, AbstractControl, ValidationErrors } from '@angular/forms';
import { BehaviorSubject, map, Observable, switchMap, take } from 'rxjs';
import { AsyncPipe, NgFor, NgIf } from '@angular/common';
import { User } from '../../models/user';
import { UserService } from '../../services/user.service';
import { LogoutComponent } from '../../logout/logout.component';
import { AnchorPointDashboardComponent } from '../dashboardAnchorpoints/anchor-point-dashboard/anchor-point-dashboard.component';
import { AnimalModelDashboardComponent } from '../dashboardAnimalModel/animal-model-dashboard/animal-model-dashboard.component';
import { UserInteractionDashboardComponent } from '../dashboardUserInteraction/user-interaction-dashboard/user-interaction-dashboard.component';

@Component({
  selector: 'app-dashboard-crud',
  standalone: true,
  imports: [AsyncPipe, NgFor, NgIf, ReactiveFormsModule, LogoutComponent,AnchorPointDashboardComponent,AnimalModelDashboardComponent,UserInteractionDashboardComponent],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  private usersSubject = new BehaviorSubject<User[]>([]);
  users$ = this.usersSubject.asObservable();
  selectedUser$!: Observable<User>;
  userForm: FormGroup;
  selectedUserId: string | null = null;
  errorMessage: string = '';

  constructor(private userService: UserService, private fb: FormBuilder) {
    this.userForm = this.fb.group({
      username: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],
      email: ['', [Validators.required, Validators.email]],
      password_hash: ['', [Validators.required, Validators.minLength(8)]],
      confirmPassword: ['', Validators.required],
      user_role: ['web', Validators.required] // Add user role to form
    }, { validators: this.passwordMatchValidator });
  }

  ngOnInit(): void {
    this.loadUsers();
  }

  loadUsers(): void {
    this.userService.getUsers().subscribe(users => {
      this.usersSubject.next(users);
    });
  }

  createUser(): void {
    if (this.userForm.valid) {
      const newUser = new User(
        '', // ID will be generated by the backend
        this.userForm.value.username,
        this.userForm.value.email,
        this.userForm.value.password_hash,
        this.userForm.value.user_role, // Add user role from form
        new Date(),
        new Date()
      );

      this.userService.createUser(newUser).subscribe({
        next: (createdUser: User) => {
          console.log('User created:', createdUser);
          this.loadUsers();
          this.userForm.reset();
          this.errorMessage = '';
        },
        error: (error) => {
          console.error('Error creating user:', error);
          this.errorMessage = 'Error creating user';
        }
      });
    }
  }

  selectUser(userId: string): void {
    this.selectedUserId = userId;
    this.selectedUser$ = this.userService.getUser(userId);
    this.selectedUser$.subscribe(user => {
      this.userForm.patchValue({
        username: user.username,
        email: user.email,
        password_hash: '', // Clear password field
        confirmPassword: '', // Clear confirm password field
        user_role: user.user_role // Set user role
      });
    });
  }

  updateUser(): void {
    if (this.userForm.valid && this.selectedUserId) {
      const updatedUser = new User(
        this.selectedUserId,
        this.userForm.value.username,
        this.userForm.value.email,
        this.userForm.value.password_hash,
        this.userForm.value.user_role, // Add user role from form
        new Date(),
        new Date()
      );

      this.userService.updateUser(this.selectedUserId, updatedUser).subscribe({
        next: (result: User) => {
          console.log('User updated:', result);
          this.loadUsers();
          this.selectedUserId = null;
          this.userForm.reset();
          this.errorMessage = '';
        },
        error: (error) => {
          console.error('Error updating user:', error);
          this.errorMessage = 'Error updating user';
        }
      });
    }
  }

  deleteUser(userId: string): void {
    this.userService.deleteUser(userId).subscribe({
      next: () => {
        console.log('User deleted');
        this.loadUsers();
        if (this.selectedUserId === userId) {
          this.selectedUserId = null;
          this.userForm.reset();
        }
        this.errorMessage = '';
      },
      error: (error) => {
        console.error('Error deleting user:', error);
        this.errorMessage = 'Error deleting user';
      }
    });
  }

  passwordMatchValidator(form: FormGroup): { [key: string]: boolean } | null {
    const password = form.get('password_hash');
    const confirmPassword = form.get('confirmPassword');

    if (password && confirmPassword && password.value !== confirmPassword.value) {
      return { 'passwordMismatch': true };
    }

    return null;
  }
}
